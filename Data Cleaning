--cleaning data in SQL queries

SELECT *
FROM NashvilleHousing


--standardize date format

SELECT SaleDate, CONVERT(DATE, SaleDate)
FROM NashvilleHousing

ALTER TABLE NashvilleHousing 
ADD SaleDateConverted DATE;

UPDATE NashvilleHousing
SET SaleDateConverted = CONVERT(DATE, SaleDate)



--populate property address data 

SELECT *
FROM NashvilleHousing
--WHERE PropertyAddress IS NULL
ORDER BY ParcelID

-- "ParcelID" and "PropertyAddress" are correlated

SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM NashvilleHousing AS a
JOIN NashvilleHousing AS b
ON a.ParcelId = b.ParcelID
	AND a.UniqueID <> b.UniqueID
WHERE a.PropertyAddress IS NULL


UPDATE a 
SET PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM NashvilleHousing AS a
JOIN NashvilleHousing AS b
ON a.ParcelId = b.ParcelID
	AND a.UniqueID <> b.UniqueID
	WHERE a.PropertyAddress IS NULL


--breaking address into individual column (address, city, state)

SELECT PropertyAddress
FROM NashvilleHousing

SELECT 
SUBSTRING(PropertyAddress,1, CHARINDEX(',', PropertyAddress)-1) 
,SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress)+1, LEN(PropertyAddress)) 
FROM NashvilleHousing


ALTER TABLE NashvilleHousing
ADD Property_Address nvarchar(255)

UPDATE NashvilleHousing
SET Property_Address = SUBSTRING(PropertyAddress,1, CHARINDEX(',', PropertyAddress)-1)

ALTER TABLE NashvilleHousing
ADD Property_City nvarchar(255)

UPDATE NashvilleHousing
SET Property_City = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress)+1, LEN(PropertyAddress))



-- breaking down owner address with PARSENAME


SELECT OwnerAddress
FROM NashvilleHousing

SELECT
PARSENAME(REPLACE(OwnerAddress, ',', '.'), 3) AS Owner_Address
,PARSENAME(REPLACE(OwnerAddress, ',', '.'), 2) AS Owner_City
,PARSENAME(REPLACE(OwnerAddress, ',', '.'), 1) AS Owner_State
FROM NashvilleHousing


ALTER TABLE NashvilleHousing
ADD Owner_Address nvarchar(255)

UPDATE NashvilleHousing
SET Owner_Address = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 3) 


ALTER TABLE NashvilleHousing
ADD Owner_City nvarchar(255)

UPDATE NashvilleHousing
SET Owner_City = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 2) 


ALTER TABLE NashvilleHousing
ADD Owner_State nvarchar(255)

UPDATE NashvilleHousing
SET Owner_State = PARSENAME(REPLACE(OwnerAddress, ',', '.'), 1) 



--change Y and N to Yes and No in "Sale as Vacant"

SELECT DISTINCT(SoldASVacant), COUNT(SoldAsVacant)
FROM NashvilleHousing
GROUP BY SoldASVacant
ORDER BY 2


SELECT SoldAsVacant
, CASE WHEN SoldAsVacant = 'Y' THEN 'Yes' 
		WHEN SoldAsVacant = 'N' THEN 'No'
		ELSE SoldAsVacant 
		END
FROM NashvilleHousing

UPDATE NashvilleHousing
SET SoldAsVacant = CASE WHEN SoldAsVacant = 'Y' THEN 'Yes' 
		WHEN SoldAsVacant = 'N' THEN 'No'
		ELSE SoldAsVacant 
		END



--remove duplicates 
--(noramlly don't do it in SQL and don't delete anything from the raw data, make a copy and delete from there)

WITH RowNumCTE AS(
SELECT *,
	ROW_NUMBER() OVER( 
	PARTITION BY ParcelID,
					PropertyAddress,
					SalePrice,
					SaleDate,
					LegalReference
					ORDER BY UniqueID
					) Row_Num
FROM NashvilleHousing
--ORDER BY ParcelID
)

SELECT * 
FROM RowNumCTE
WHERE Row_Num > 1
ORDER BY PropertyAddress


--delete unused columns

ALTER TABLE NashvilleHousing
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress

ALTER TABLE NashvilleHousing
DROP COLUMN SaleDate


SELECT *
FROM NashvilleHousing





